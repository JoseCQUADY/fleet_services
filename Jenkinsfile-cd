pipeline {
    agent any

    environment {
        REMOTE_IP = '40.233.6.181'
        DOCKER_USER = 'jcq12'
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Obtener servicios modificados') {
            steps {
                copyArtifacts(
                    projectName: 'fleet-system/development',
                    filter: 'changed_services.txt'
                )
            }
        }

        stage('Desplegar servicios modificados') {
            steps {
                bat '''
                    @echo off
                    setlocal enabledelayedexpansion

                    if not exist changed_services.txt (
                        echo No hay servicios modificados.
                        exit /b 0
                    )

                    set /p SERVICES=<changed_services.txt
                    for %%S in (!SERVICES!) do (
                        call :deployService %%S
                    )

                    del changed_services.txt
                    echo Archivo changed_services.txt eliminado.

                    exit /b 0

                :deployService
                set SERVICE=%1

                rem Asignar contenedor y puerto basado en el nombre del servicio
                if "%SERVICE%"=="ms-api-gateway"       (set CONTAINER=gateway      & set PORT=8080) else ^
                if "%SERVICE%"=="ms-auth-service"      (set CONTAINER=auth         & set PORT=8081) else ^
                if "%SERVICE%"=="ms-administrator-service" (set CONTAINER=administrator & set PORT=8082) else ^
                if "%SERVICE%"=="ms-invitation-service"    (set CONTAINER=code      & set PORT=8083) else ^
                if "%SERVICE%"=="ms-vehicle-service"   (set CONTAINER=vehicle      & set PORT=8084) else ^
                if "%SERVICE%"=="ms-driver-service"    (set CONTAINER=driver       & set PORT=8085) else ^
                if "%SERVICE%"=="ms-route-service"     (set CONTAINER=route        & set PORT=8086) else (
                    echo Servicio %SERVICE% no reconocido. Saltando...
                    goto :eof
                )
                    echo ===========================
                    echo Desplegando %SERVICE%
                    echo Contenedor: %CONTAINER%
                    echo Puerto: %PORT%
                    echo ===========================

                    ssh -i key.pem opc@%REMOTE_IP% sudo docker pull %DOCKER_USER%/%SERVICE%:%IMAGE_TAG%

                    ssh -i key.pem opc@%REMOTE_IP% sudo docker ps -a -q -f name=^/%CONTAINER%$ > nul && (
                        echo Contenedor %CONTAINER% existe. Deteniéndolo y eliminándolo...
                        ssh -i key.pem opc@%REMOTE_IP% sudo docker stop %CONTAINER%
                        ssh -i key.pem opc@%REMOTE_IP% sudo docker rm %CONTAINER%
                    ) || (
                        echo Contenedor %CONTAINER% no existe. Continuando...
                    )

                    ssh -i key.pem opc@%REMOTE_IP% sudo docker run -d --name %CONTAINER% --network devops -p %PORT%:%PORT% %DOCKER_USER%/%SERVICE%:%IMAGE_TAG%
                    rem Conectar gateway también a red-web
                    if "%SERVICE%"=="ms-api-gateway" (
                    ssh -i key.pem opc@%REMOTE_IP% sudo docker network connect red-web gateway
                    )
                    goto :eof
                '''
            }
        }
    }
}
