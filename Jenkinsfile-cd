pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Obtener servicios modificados') {
            steps {
                copyArtifacts(
                    projectName: 'fleet-system/development',
                    selector: specific('development'),
                    filter: 'changed_services.txt'
                )
            }
        }

        stage('Desplegar servicios modificados') {
            steps {
                script {
                    def file = readFile('changed_services.txt')
                    def services = file.split('\n').findAll { it.trim() }

                    services.each { service ->
                        echo "==========================="
                        echo "Desplegando ${service}"
                        echo "==========================="

                        def containerName = getContainerName(service)
                        def port = getContainerPort(service)

                        bat "docker pull jcq12/${service}:latest"

                        bat """
                            if sudo docker ps -a --format "{{.Names}}" | findstr /i ${containerName} >nul 2>&1 (
                                echo Contenedor ${containerName} existe. Deteniéndolo y eliminándolo...
                                sudo docker stop ${containerName}
                                sudo docker rm ${containerName}
                            ) else (
                                echo Contenedor ${containerName} no existe.
                            )
                        """

                        bat " sudo docker run -d --name ${containerName} -p ${port}:${port} --network devops jcq12/${service}:latest"
                    }
                }
            }
        }
    }
}

def getContainerName(service) {
    switch(service) {
        case 'ms-administrator-service': return 'administrator'
        case 'ms-auth-service': return 'auth'
        case 'ms-route-service': return 'route'
        default: return service
    }
}

def getContainerPort(service) {
    switch(service) {
        case 'ms-administrator-service': return '8082'
        case 'ms-auth-service': return '8081'
        case 'ms-route-service': return '8083'
        default: return '8080'
    }
}
